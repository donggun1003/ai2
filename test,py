import re
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

# 사용자 채팅 데이터
data = {
    "고민하지 않음": [
        "네, 알겠습니다.",
        "물론 가능합니다.",
        "지금바로 시작할게요.",
        "저도 그렇게 생각해요.",
    ],
    "고민하는 중": [
        "음... 생각해볼게요.",
        "어떻게 말하지...",
        "잠시 생각해봅니다.",
        "조금 기다려주세요.",
    ],
    "고민 시간이 길다": [
        "아직 결정하지 못했어요.",
        "시간이 조금 필요합니다.",
        "더 생각해봐야 할 것 같아요.",
        "다른 의견도 듣고 싶어요.",
    ],
}

# 새로운 다양한 채팅 데이터 추가
data["고민하지 않음"] += [
    "알겠습니다.",
    "그래요.",
    "좋아요.",
    "해볼게요.",
    "괜찮아요.",
    "고마워요.",
]

data["고민하는 중"] += [
    "뭘 해야할까요?",
    "어떻게 해야할까요?",
    "조금 더 생각해보겠습니다.",
    "아직 결정하기 힘들어요.",
    "의견을 더 듣고 싶어요.",
]

data["고민 시간이 길다"] += [
    "더 고민해야 할 것 같아요.",
    "조금만 더 생각해보세요.",
    "시간을 내서 고민해보세요.",
    "다른 사람들의 의견을 들어보세요.",
]

# 데이터 전처리 함수
def preprocess_text(text):
    # 특수 문자 제거
    text = re.sub(r"[^a-zA-Z0-9ㄱ-ㅣ가-힣\s]", "", text)
    return text.strip()

# 데이터셋 생성
X, y = [], []
for label, chats in data.items():
    for chat in chats:
        X.append(preprocess_text(chat))
        y.append(label)

# 특징 벡터 생성 (TF-IDF 사용)
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(X)

# 학습 데이터와 테스트 데이터로 분리
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 분류 모델 생성 및 학습
classifier = LogisticRegression()
classifier.fit(X_train, y_train)

# 사용자 채팅 예측 함수
def predict_user_chat(chat):
    preprocessed_chat = preprocess_text(chat)
    vectorized_chat = vectorizer.transform([preprocessed_chat])
    prediction = classifier.predict(vectorized_chat)[0]
    return prediction

# 사용자 채팅 입력 및 예측
while True:
    user_input = input("사용자 채팅을 입력하세요 (종료: 'q'): ")
    if user_input.lower() == "q":
        break
    prediction = predict_user_chat(user_input)
    print(f"입력: {user_input}, 예측: {prediction}")
